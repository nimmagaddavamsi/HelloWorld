import com.datastax.oss.driver.api.core.CqlSession;
import com.datastax.oss.driver.api.core.cql.BatchStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.core.cql.ResultSet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;

public class CassandraBatchSelectWithExcelInput {
    private static final int BATCH_SIZE = 100;

    public static void main(String[] args) {
        String excelFilePath = "path/to/your/input.xlsx"; // Path to the Excel file

        // Step 1: Read data from Excel file
        List<String> customerOrderPairs = readCustomerOrderPairsFromExcel(excelFilePath);

        // Step 2: Connect to Cassandra and execute batch queries in batches of 100
        try (CqlSession session = CqlSession.builder()
                .addContactPoint(new InetSocketAddress("127.0.0.1", 9042))
                .withLocalDatacenter("datacenter1")
                .build()) {

            for (int i = 0; i < customerOrderPairs.size(); i += BATCH_SIZE) {
                // Create a batch statement for the current batch
                BatchStatement batch = BatchStatement.newInstance(BatchStatement.Type.UNLOGGED);

                // Add up to 100 statements to the batch
                for (int j = i; j < i + BATCH_SIZE && j < customerOrderPairs.size(); j++) {
                    String pair = customerOrderPairs.get(j);
                    String[] parts = pair.split(", ");
                    String customerId = parts[0];
                    String orderId = parts[1];

                    SimpleStatement selectStatement = SimpleStatement.newInstance(
                            "SELECT * FROM orders WHERE customer_id = ? AND order_id = ?",
                            Integer.parseInt(customerId), Integer.parseInt(orderId)
                    );
                    batch = batch.add(selectStatement);
                }

                // Execute the batch and retrieve results
                ResultSet resultSet = session.execute(batch);
                resultSet.forEach(row -> {
                    System.out.println("Row: " + row);
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to read customer_id and order_id pairs from an Excel file
    private static List<String> readCustomerOrderPairsFromExcel(String excelFilePath) {
        List<String> customerOrderPairs = new ArrayList<>();

        try (FileInputStream file = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(file)) {

            Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // Skip header row if necessary

                int customerId = (int) row.getCell(0).getNumericCellValue(); // Assuming customer_id in column A
                int orderId = (int) row.getCell(1).getNumericCellValue();    // Assuming order_id in column B

                customerOrderPairs.add(customerId + ", " + orderId);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return customerOrderPairs;
    }
}
